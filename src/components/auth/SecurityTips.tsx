
import React, { useState } from 'react';
import { Shield, Eye, EyeOff, AlertTriangle, CheckCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface SecurityTipsProps {
  onClose?: () => void;
}

export const SecurityTips: React.FC<SecurityTipsProps> = ({ onClose }) => {
  const [currentTip, setCurrentTip] = useState(0);

  const securityTips = [
    {
      icon: <Shield className="w-8 h-8 text-green-600" />,
      title: 'рдЕрдкрдирд╛ PIN рд╕реБрд░рдХреНрд╖рд┐рдд рд░рдЦреЗрдВ',
      description: 'рдЕрдкрдирд╛ PIN рдХрд┐рд╕реА рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рди рдХрд░реЗрдВред рдпрд╣ рдЖрдкрдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рд╣реИред',
      visual: 'ЁЯФТ'
    },
    {
      icon: <Eye className="w-8 h-8 text-blue-600" />,
      title: 'PIN рдЯрд╛рдЗрдк рдХрд░рддреЗ рд╕рдордп рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВ',
      description: 'PIN рдбрд╛рд▓рддреЗ рд╕рдордп рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдХреЛрдИ рджреЗрдЦ рдирд╣реАрдВ рд░рд╣рд╛ рд╣реИред',
      visual: 'ЁЯСА'
    },
    {
      icon: <AlertTriangle className="w-8 h-8 text-orange-600" />,
      title: 'рдХрдордЬреЛрд░ PIN рд╕реЗ рдмрдЪреЗрдВ',
      description: '1234, 1111 рдЬреИрд╕реЗ рдЖрд╕рд╛рди PIN рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред',
      visual: 'тЪая╕П'
    },
    {
      icon: <CheckCircle className="w-8 h-8 text-green-600" />,
      title: 'рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ PIN рдмрджрд▓реЗрдВ',
      description: 'рдмреЗрд╣рддрд░ рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рд╣рд░ 3 рдорд╣реАрдиреЗ рдореЗрдВ рдЕрдкрдирд╛ PIN рдмрджрд▓реЗрдВред',
      visual: 'ЁЯФД'
    }
  ];

  const nextTip = () => {
    setCurrentTip((prev) => (prev + 1) % securityTips.length);
  };

  const prevTip = () => {
    setCurrentTip((prev) => (prev - 1 + securityTips.length) % securityTips.length);
  };

  const tip = securityTips[currentTip];

  return (
    <div className="bg-white rounded-2xl p-6 shadow-lg max-w-sm mx-auto">
      <div className="text-center mb-6">
        <div className="text-4xl mb-3">{tip.visual}</div>
        <div className="flex justify-center mb-3">{tip.icon}</div>
        <h3 className="text-lg font-bold text-gray-800 mb-2">{tip.title}</h3>
        <p className="text-sm text-gray-600 leading-relaxed">{tip.description}</p>
      </div>

      <div className="flex items-center justify-between">
        <Button
          variant="outline"
          size="sm"
          onClick={prevTip}
          disabled={currentTip === 0}
        >
          рдкрд┐рдЫрд▓рд╛
        </Button>

        <div className="flex gap-2">
          {securityTips.map((_, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full ${
                index === currentTip ? 'bg-green-600' : 'bg-gray-300'
              }`}
            />
          ))}
        </div>

        {currentTip < securityTips.length - 1 ? (
          <Button
            variant="outline"
            size="sm"
            onClick={nextTip}
          >
            рдЕрдЧрд▓рд╛
          </Button>
        ) : (
          <Button
            size="sm"
            onClick={onClose}
            className="bg-green-600 hover:bg-green-700"
          >
            рд╕рдордЭ рдЧрдпрд╛
          </Button>
        )}
      </div>
    </div>
  );
};
